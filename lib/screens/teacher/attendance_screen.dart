import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../providers/auth_provider.dart';
import '../../models/models.dart';
import '../../services/attendance_service.dart';
import '../../core/config/supabase_config.dart';

class AttendanceScreen extends StatefulWidget {
  final String classId;
  final String subjectId;
  final String teacherId;
  final String className;
  final String subjectName;
  final DateTime? date; // Optional date, defaults to today

  const AttendanceScreen({
    Key? key,
    required this.classId,
    required this.subjectId,
    required this.teacherId,
    required this.className,
    required this.subjectName,
    this.date,
  }) : super(key: key);

  @override
  _AttendanceScreenState createState() => _AttendanceScreenState();
}

class _AttendanceScreenState extends State<AttendanceScreen> {
  final SupabaseClient _supabase = SupabaseConfig.client;
  final AttendanceService _attendanceService = AttendanceService();
  
  List<UserProfile> _students = [];
  List<AttendanceRecord> _existingAttendance = [];
  Map<String, bool> _attendanceStatus = {}; // studentId -> isPresent
  Map<String, String> _attendanceNotes = {}; // studentId -> notes
  bool _isLoading = true;
  bool _isSaving = false;
  String? _error;
  late DateTime _attendanceDate;

  @override
  void initState() {
    super.initState();
    _attendanceDate = widget.date ?? DateTime.now();
    _loadStudents();
  }

  Future<void> _loadStudents() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      // Load students in the class
      final response = await _supabase
          .from('profiles')
          .select('*')
          .eq('class_id', widget.classId)
          .eq('user_type', 'student')
          .order('name');

      final students = response.map((json) {
        return UserProfile.fromJson(json);
      }).toList();

      // Load existing attendance records for this class, subject, and date
      final existingAttendance = await _attendanceService.loadAttendanceRecords(
        classId: widget.classId,
        subjectId: widget.subjectId,
        date: _attendanceDate,
      );

      setState(() {
        _students = students;
        _existingAttendance = existingAttendance;
        
        // Initialize attendance status from existing records
        for (var record in existingAttendance) {
          _attendanceStatus[record.studentId] = record.isPresent;
          if (!record.isPresent && record.notes != null) {
            _attendanceNotes[record.studentId] = record.notes!;
          }
        }
        
        // For students without existing records, default to present
        for (var student in students) {
          if (!_attendanceStatus.containsKey(student.userId)) {
            _attendanceStatus[student.userId] = true;
          }
        }
        
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
    }
  }

  void _toggleAttendance(String studentId) {
    setState(() {
      _attendanceStatus[studentId] = !_attendanceStatus[studentId]!;
      
      // Clear notes if marking as present
      if (_attendanceStatus[studentId]!) {
        _attendanceNotes.remove(studentId);
      }
    });
  }

  void _updateNotes(String studentId, String notes) {
    setState(() {
      _attendanceNotes[studentId] = notes;
    });
  }

  Future<void> _saveAttendance() async {
    try {
      setState(() {
        _isSaving = true;
      });

      // Create attendance records for all students
      final records = <AttendanceRecord>[];
      final now = DateTime.now();
      
      for (var student in _students) {
        final studentId = student.userId;
        final isPresent = _attendanceStatus[studentId] ?? true;
        final notes = isPresent ? null : _attendanceNotes[studentId];
        
        records.add(AttendanceRecord(
          id: '', // Will be generated by the database
          createdAt: now,
          studentId: student.id, // Use the actual UUID from profiles.id, not user_id
          subjectId: widget.subjectId,
          teacherId: widget.teacherId,
          attendanceDate: _attendanceDate,
          isPresent: isPresent,
          notes: notes,
          studentName: student.name,
          subjectName: widget.subjectName,
        ));
      }

      // Save records to database
      await _attendanceService.saveAttendanceRecords(records);

      // Show success message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Attendance saved successfully')),
        );
      }
      
      setState(() {
        _isSaving = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isSaving = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to save attendance: $_error')),
        );
      }
    }
  }

  Widget _buildHeader() {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              widget.subjectName,
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 8),
            Text(
              widget.className,
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            Text(
              'Date: ${_attendanceDate.day}/${_attendanceDate.month}/${_attendanceDate.year}',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStudentList() {
    if (_students.isEmpty) {
      return const Center(
        child: Text(
          'No students found in this class',
          style: TextStyle(fontSize: 16),
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: _students.length,
      itemBuilder: (context, index) {
        final student = _students[index];
        final isPresent = _attendanceStatus[student.userId] ?? true;
        final notes = _attendanceNotes[student.userId] ?? '';

        return Card(
          margin: const EdgeInsets.only(bottom: 12),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        student.name,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    Switch(
                      value: isPresent,
                      onChanged: (value) {
                        _toggleAttendance(student.userId);
                      },
                    ),
                  ],
                ),
                if (!isPresent)
                  Padding(
                    padding: const EdgeInsets.only(top: 8.0),
                    child: TextField(
                      decoration: const InputDecoration(
                        labelText: 'Notes',
                        hintText: 'Reason for absence...',
                        border: OutlineInputBorder(),
                      ),
                      maxLines: 2,
                      onChanged: (value) {
                        _updateNotes(student.userId, value);
                      },
                      controller: TextEditingController(text: notes),
                    ),
                  ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildActionButtons() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: [
          Expanded(
            child: ElevatedButton(
              onPressed: _isSaving ? null : () {
                Navigator.of(context).pop();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.grey[300],
                foregroundColor: Colors.black,
              ),
              child: const Text('Cancel'),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: ElevatedButton(
              onPressed: _isSaving ? null : _saveAttendance,
              child: _isSaving
                  ? const SizedBox(
                      height: 16,
                      width: 16,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : const Text('Save Attendance'),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Mark Attendance'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadStudents,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _error != null
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.error_outline, size: 64, color: Colors.red[300]),
                      const SizedBox(height: 16),
                      Text('Error: $_error'),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: _loadStudents,
                        child: const Text('Retry'),
                      ),
                    ],
                  ),
                )
              : Column(
                  children: [
                    _buildHeader(),
                    const SizedBox(height: 16),
                    Expanded(
                      child: _buildStudentList(),
                    ),
                    _buildActionButtons(),
                  ],
                ),
    );
  }
}
